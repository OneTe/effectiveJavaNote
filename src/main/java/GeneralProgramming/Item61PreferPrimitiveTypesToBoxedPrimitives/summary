Java has a two-part type system:
1. consisting of primitives, such as : int, double, and boolean
2. reference types, such as : String and List

Every primitive type has a corresponding reference type, called a boxed primitive.
The boxed primitives corresponding to [int], [double], and [boolean] are [Integer], [Double], and [Boolean].

Three major differences between primitives and boxed primitives:
1. primitives have only their values, whereas boxed
   primitives have identities distinct from their values
   (two boxed primitive instances can have the same value and different identities)

2. primitive types have only fully functional values, whereas each boxed primitive
   type has one nonfunctional value, which is null, in addition to all the functional
   values of the corresponding primitive type

3. primitives are more time- and space-efficient than boxed primitives


In summary, use primitives in preference to boxed primitives whenever you have the choice.
Primitive types are simpler and faster. If you must use boxed primitives, be careful! Autoboxing
reduces the verbosity, but not the danger, of using boxed primitives. When your program compares
two boxed primitives with the == operator, it does an identity comparison, which is almost certainly
not what you want. When your program does mixed-type computations involving boxed and unboxed primitives,
it does unboxing, and when your program does unboxing, it can throw a NullPointerException. Finally, when
your program boxes primitive values, it can result in costly and unnecessary object creations.
