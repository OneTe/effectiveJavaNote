three common situations where you can’t use for-each:

1.Destructive filtering  —  If you need to traverse a collection removing selected elements,
  then you need to use an explicit iterator so that you can call its remove method. You
  can often avoid explicit traversal by using Collection’s removeIf method, added in Java 8.
2.Transforming  —  If you need to traverse a list or array and replace some or all of the
  values of its elements, then you need the list iterator or array index in order to replace
  the value of an element.
3.Parallel iteration  —  If you need to traverse multiple collections in parallel, then you
  need explicit control over the iterator or index variable so that all iterators or index
  variables can be advanced in lockstep (as demonstrated unintentionally in the buggy card
  and dice examples above).

In summary, the for-each loop provides compelling advantages over the traditional for loop
in clarity, flexibility, and bug prevention, with no performance penalty. Use for-each loops
in preference to forloops wherever you can.
