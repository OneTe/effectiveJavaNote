In summary, using wildcard types in your APIs, while tricky, makes the
APIs far more flexible. If you write a library that will be widely used,
the proper use of wildcard types should be considered mandatory. Remember
the basic rule: producer-extends, consumer-super (PECS). Also remember that
all comparables and comparators are consumers.



One more wildcard-related topic
There is a duality between type parameters and wildcards, and many methods can be declared using one or the other

// Two possible declarations for the swap method
public static <E> void swap(List<E> list, int i, int j);

public static void swap(List<?> list, int i, int j) {
       swapHelper(list, i, j);
}
// Private helper method for wildcard capture
private static <E> void swapHelper(List<E> list, int i, int j) {
   list.set(i, list.set(j, list.get(i)));
}
In a public API, the second is better because it’s simpler. You pass in a list—any list—and the method swaps the indexed elements.

if a type parameter appears only once in a method declaration, replace it with a wildcard