 raw types (generic types without their type parameters)
 For example, the raw type corresponding to List<E> is List.

 1.If you use raw types, you lose all the safety and expressiveness benefits of generics
 2.you lose type safety if you use a raw type such as List, but not if you use a parameterized
   type such as List<Object>.

Term                            Example
 Parameterized type             List<String>
 Actual type parameter          String
 Generic type                   List<E>
 Formal type parameter          E
 Unbounded wildcard type        List<?>
 Raw type                       List
 Bounded type parameter         <E extends Number>
 Recursive type bound           <T extends Comparable<T>>
 Bounded wildcard type          List<? extends Number>
 Generic method                 static <E> List<E> asList(E[] a)
 Type token                     String.class

 Raw type:
 /**
  * My stamp collection. Contains only Stamp instances.
  */
 private Collection stamps = ... ;

 // Erroneous insertion of coin into stamp collection
 stamps.add(new Coin( ... ));

 // Now a raw iterator type - don't do this!
 for (Iterator i = stamps.iterator(); i.hasNext();) {
    Stamp s = (Stamp) i.next(); // Throws ClassCastException
    ... // Do something with the stamp
 }


 Parameterized type:
 List<String> strings  = new List<String>();
 strings.add(new String());

 // for-each loop over a parameterized collection - typesafe
 for (Stamp s : stamps) { // No cast
    ... // Do something with the stamp
 }

 // for loop with parameterized iterator declaration - typesafe
 for (Iterator<Stamp> i = stamps.iterator(); i.hasNext(); ) {
    Stamp s = i.next(); // No cast necessary
    ... // Do something with the stamp
 }



List v/s List<Object>:
// Uses raw type (List) - fails at runtime!
public static void main(String[] args) {
   List<String> strings = new ArrayList<String>();
   unsafeAdd(strings, new Integer(42));
   String s = strings.get(0); // Compiler-generated cast
}

// warning: unchecked call to add(E) in raw type List
private static void unsafeAdd(List list, Object o) {
   list.add(o);
}

// unsafeAdd(List<Object>,Object) cannot be applied to (List<String>,Integer)
private static void unsafeAdd(List<Object> list, Object o) {
   list.add(o);
}

// Parameterized type
private static void safeAdd(List<String> list, String s) {
   list.add(s);
}

// Generic method
private static <E> void safeAdd(List<E> list, E e) {
   list.add(e);
}



Unbounded wildcard type:
// Use of raw type for unknown element type - don't do this!
static int numElementsInCommon(Set s1, Set s2) {
   int result = 0;
   for (Object o1 : s1)
      if (s2.contains(o1))
         result++;
   return result;
}
// Unbounded wildcard type - typesafe and flexible
static int numElementsInCommon(Set<?> s1, Set<?> s2) {
   int result = 0;
   for (Object o1 : s1)
      if (s2.contains(o1))
         result++;
   return result;
}