Checked exceptions force the programmer to deal with exceptional conditions, greatly enhancing reliability.
If the programmer using the API can do no better, an unchecked exception would be more appropriate

} catch(TheCheckedException e) {
   throw new AssertionError(); // Can't happen!
}

} catch(TheCheckedException e) {
   e.printStackTrace();        // Oh well, we lose.
   System.exit(1);
}

One technique for turning a checked exception into an unchecked exception is to break the method that
throws the exception into two methods, the first of which returns a boolean that indicates whether the
exception would be thrown

// Invocation with checked exception
try {
   obj.action(args);
} catch(TheCheckedException e) {
   // Handle exceptional condition
   ...
}

// Invocation with state-testing method and unchecked exception
if (obj.actionPermitted(args)) {
   obj.action(args);
} else {
   // Handle exceptional condition
   ...
}


In summary, when used sparingly, checked exceptions can increase the reliability of programs; when
overused, they make APIs painful to use. If callers wonâ€™t be able to recover from failures, throw
unchecked exceptions. If recovery may be possible and you want to force callers to handle exceptional
conditions, first consider returning an optional. Only if this would provide insufficient information
in the case of failure should you throw a checked exception.



